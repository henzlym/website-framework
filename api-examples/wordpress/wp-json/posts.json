[
	{
		"id": 377565,
		"date": "2024-03-22T11:52:31",
		"date_gmt": "2024-03-22T18:52:31",
		"guid": {
			"rendered": "https://css-tricks.com/?p=377565"
		},
		"modified": "2024-03-22T13:43:57",
		"modified_gmt": "2024-03-22T20:43:57",
		"slug": "accessible-forms-with-pseudo-classes",
		"status": "publish",
		"type": "post",
		"link": "https://css-tricks.com/accessible-forms-with-pseudo-classes/",
		"title": {
			"rendered": "Accessible Forms with Pseudo Classes"
		},
		"content": {
			"rendered": "\n<p>Hey all you wonderful developers out there! In this post, I am going to take you through creating a simple contact form using semantic HTML and an awesome CSS pseudo class known as <code>:focus-within</code>. The <code>:focus-within</code> class allows for great control over focus and letting your user know this is exactly where they are in the experience. Before we jump in, let\u2019s get to the core of what web accessibility is.</p>\n\n\n<h2 class=\"wp-block-heading\" id=\"form-accessibility\"><br>Form Accessibility?</h2>\n\n\n<p><br>You have most likely heard the term \u201caccessibility\u201d everywhere or the numeronym, a11y. What does it mean? That is a great question with so many answers. When we look at the physical world, accessibility means things like having sharps containers in your bathrooms at your business, making sure there are ramps for wheel assisted people, and having peripherals like large print keyboards on hand for anyone that needs it.</p>\n\n\n\n<p>The gamut of accessibility doesn\u2019t stop there, we have digital accessibility that we need to be cognizant of as well, not just for external users, but internal colleagues as well. <a href=\"https://www.w3.org/TR/WCAG22/#contrast-minimum\" rel=\"noopener\">Color contrast is a low hanging fruit</a> that we should be able to nip in the bud. At our workplaces, making sure that if any employee needs assistive tech like a screen reader, we have that installed and available. There are a lot of things that need to be kept into consideration. This article will focus on web accessibility by keeping the <a href=\"https://www.w3.org/TR/WCAG22/\" rel=\"noopener\">WCAG (web content accessibility guidelines)</a> in mind.</p>\n\n\n\n<figure class=\"wp-block-pullquote ticss-471d08cf\" style=\"border-style:none;border-width:0px\"><blockquote><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus\" rel=\"noopener\">MDN (Mozilla Developer Network)</a></p><cite>The <code>:focus-within</code> CSS pseudo-class matches an element if the element or any of its descendants are focused. In other words, it represents an element that is itself matched by the :focus pseudo-class or has a descendant that is matched by :focus. (This includes descendants in shadow trees.)</cite></blockquote></figure>\n\n\n\n<p>This pseudo class is really great when you want to emphasize that the user is in fact interacting with the element. You can change the background color of the whole form, for example. Or, if focus is moved into an input, you can make the label bold and larger of an input element when focus is moved into that input. What is happening below in the code snippets and examples is what is making the form accessible. <code>:focus-within</code> is just one way we can use CSS to our advantage.</p>\n\n\n<h3 class=\"wp-block-heading\" id=\"how-to-focus\">How To Focus</h3>\n\n\n<p><br>Focus, in regards to accessibility and the web experience, is the visual indicator that something is being interacted with on the page, in the UI, or within a component. CSS can tell when an interactive element is focused. </p>\n\n\n\n<figure class=\"wp-block-pullquote ticss-805ba99d\" style=\"border-style:none;border-width:0px\"><blockquote><p>\u201cThe <code>:focus</code> CSS pseudo-class represents an element (such as a form input) that has received focus. It is generally triggered when the user clicks or taps on an element or selects it with the keyboard&#8217;s Tab key.\u201d</p><cite><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus\" rel=\"noopener\">MDN (Mozilla Developer Network)</a></cite></blockquote></figure>\n\n\n\n<p>Always make sure that the focus indicator or the ring around focusable elements maintains the proper color contrast through the experience.</p>\n\n\n\n<p>Focus is written like this and can be styled to match your branding if you choose to style it.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css ticss-59119c2e\" data-line=\"\"><code markup=\"tt\">:focus {\n  * / INSERT STYLES HERE /*\n}</code></pre>\n\n\n\n<p>Whatever you do, never set your outline to <code><em><strong>0 </strong></em></code><em><strong>or</strong></em><code><em><strong> none</strong></em></code>. Doing so will remove a visible focus indicator for everyone across the whole experience. If you need to remove focus, you can, but make sure to add that back in later. When you remove focus from your CSS or set the outline to <code><em><strong>0 </strong></em></code><em><strong>or</strong></em><code><em><strong> none</strong></em></code>, it removes the focus ring for all your users. This is seen a lot when using a CSS reset. A CSS reset will reset the styles to a blank canvas. This way you are in charge of the empty canvas to style as you wish. If you wish to use a CSS reset, check out <a href=\"https://www.joshwcomeau.com/css/custom-css-reset/\" rel=\"noopener\">Josh Comeau\u2019s reset</a>.</p>\n\n\n\n<p class=\"ticss-4379d1ec\"><strong><mark style=\"background-color:rgba(0, 0, 0, 0)\" class=\"has-inline-color has-vivid-red-color\">*DO NOT DO what is below!</mark></strong></p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:focus {\n  outline: 0;\n}\n\n:focus {\n  outline: none;\n}</code></pre>\n\n\n<h3 class=\"wp-block-heading ticss-4379d1ec\" id=\"look-within\"><br>Look Within!</h3>\n\n\n<p class=\"ticss-4379d1ec\"><br>One of the coolest ways to style focus using CSS is what this article is all about. If you haven\u2019t checked out the <code>:focus-within</code> pseudo class, definitely give that a look! There are a lot of hidden gems when it comes to using semantic markup and CSS, and this is one of them. A lot of things that are overlooked are accessible by default, for instance, semantic markup is by default accessible and should be used over div\u2019s at all times.</p>\n\n\n\n<div class=\"wp-block-group is-layout-constrained wp-block-group-is-layout-constrained\"><div class=\"wp-block-group__inner-container\">\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;header>\n  &lt;h1>Semantic Markup&lt;/h1>\n  &lt;nav>\n    &lt;ul>\n      &lt;li>&lt;a href=\"/\">Home&lt;/a>&lt;/li>\n      &lt;li>&lt;a href=\"/about\">About&lt;/a>&lt;/li>\n    &lt;/ul>\n  &lt;/nav>\n&lt;/header>\n\n&lt;section>&lt;!-- Code goes here -->&lt;/section>\n\n&lt;section>&lt;!-- Code goes here -->&lt;/section>\n\n&lt;aside>&lt;!-- Code goes here -->&lt;/aside>\n\n&lt;footer>&lt;!-- Code goes here -->&lt;/footer></code></pre>\n</div></div>\n\n\n\n<p>The <code>header</code>, <code>nav</code>, <code>main</code>, <code>section</code>, <code>aside</code>, and <code>footer</code> are all semantic elements. The <code>h1</code> and <code>ul</code> are also semantic and accessible.</p>\n\n\n\n<p>Unless there is a custom component that needs to be created, then a <code>div</code> is fine to use, paired with <a href=\"https://www.w3.org/WAI/standards-guidelines/aria/\" rel=\"noopener\">ARIA (Accessible Rich Internet Applications)</a>. We can do a deep dive into ARIA in a later post. For now let\u2019s focus\u2026see what I did there\u2026on this CSS pseudo class.</p>\n\n\n\n<p>The <code>:focus-within</code> pseudo class allows you to select an element when any descendent element it contains has focus.</p>\n\n\n<h2 class=\"wp-block-heading\" id=\"focuswithin-in-action\"><br><code>:focus-within</code> in Action!<br></h2>\n\n<h3 class=\"wp-block-heading\" id=\"html\">HTML</h3>\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;form>\n  &lt;div>\n    &lt;label for=\"firstName\">First Name&lt;/label>&lt;input id=\"firstName\" type=\"text\">\n  &lt;/div>\n  &lt;div>\n    &lt;label for=\"lastName\">Last Name&lt;/label>&lt;input id=\"lastName\" type=\"text\">\n  &lt;/div>\n  &lt;div>\n    &lt;label for=\"phone\">Phone Number&lt;/label>&lt;input id=\"phone\" type=\"text\">\n  &lt;/div>\n  &lt;div>\n    &lt;label for=\"message\">Message&lt;/label>&lt;textarea id=\"message\">&lt;/textarea>\n  &lt;/div>\n&lt;/form></code></pre>\n\n\n<h3 class=\"wp-block-heading\" id=\"css\">CSS</h3>\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">form:focus-within {\n  background: #ff7300;\n  color: black;\n  padding: 10px;\n}</code></pre>\n\n\n\n<p class=\"ticss-af97e0c0\">The example code above will add a background color of orange, add some padding, and change the color of the labels to black.</p>\n\n\n\n<p>The final product looks something like below. Of course the possibilities are endless to change up the styling, but this should get you on a good track to make the web more accessible for everyone!</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://codepen.io/chrisdemars/pen/PRXbpg\" rel=\"noopener\"><img loading=\"lazy\" decoding=\"async\" width=\"460\" height=\"362\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/03/focus-within-codepen-example.gif?resize=460%2C362&#038;ssl=1\" alt=\"First example of focus-within css class highlighting the form background and changing the label text color.\" class=\"wp-image-377570\" data-recalc-dims=\"1\"/></a></figure></div>\n\n\n<p>Another use case for using <code>:focus-within</code> would be turning the labels bold, a different color, or enlarging them for users with low vision. The example code for that would look something like below.</p>\n\n\n<h3 class=\"wp-block-heading\" id=\"html\">HTML</h3>\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;form>\n  &lt;h1>:focus-within part 2!&lt;/h1>\n  &lt;label for=\"firstName\">First Name: &lt;input name=\"firstName\" type=\"text\" />&lt;/label>\n  &lt;label for=\"lastName\">Last Name: &lt;input name=\"lastName\" type=\"text\" />&lt;/label>\n  &lt;label for=\"phone\">Phone number: &lt;input type=\"tel\" id=\"phone\" />&lt;/label>\n  &lt;label for=\"message\">Message: &lt;textarea name=\"message\" id=\"message\"/>&lt;/textarea>&lt;/label>\n&lt;/form>\n</code></pre>\n\n\n<h3 class=\"wp-block-heading\" id=\"css\">CSS</h3>\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">label {\n  display: block;\n  margin-right: 10px;\n  padding-bottom: 15px;\n}\n\nlabel:focus-within {\n  font-weight: bold;\n  color: red;\n  font-size: 1.6em;\n}\n</code></pre>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://codepen.io/chrisdemars/pen/KKYWLGr\" rel=\"noopener\"><img loading=\"lazy\" decoding=\"async\" width=\"480\" height=\"404\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/03/focus-within-part-2-example.gif?resize=480%2C404&#038;ssl=1\" alt=\"Showing how to bold, change color and font size of labels in a form using :focus-within.\" class=\"wp-image-377575\" data-recalc-dims=\"1\"/></a></figure></div>\n\n\n<p><code>:focus-within</code> also has great browser support across the board according to <a href=\"https://caniuse.com/?search=focus-within\" target=\"_blank\" rel=\"noreferrer noopener\">Can I use</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"448\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/03/can-i-use-support.png?resize=1024%2C448&#038;ssl=1\" alt=\"Focus within css pseudo class browser support according to the can i use website.\" class=\"wp-image-377577\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/03/can-i-use-support.png?resize=1024%2C448&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/03/can-i-use-support.png?resize=300%2C131&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/03/can-i-use-support.png?resize=768%2C336&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/03/can-i-use-support.png?resize=1536%2C672&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/03/can-i-use-support.png?resize=2048%2C897&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 class=\"wp-block-heading\" id=\"conclusion\"><strong>Conclusion</strong></h3>\n\n\n<p>Creating amazing, accessible user experience should always be a top priority when shipping software, not just externally but internally as well. We as developers, all the way up to senior leadership need to be cognizant of the challenges others face and how we can be ambassadors for the web platform to make it a better place.</p>\n\n\n\n<p>Using technology like semantic markup and CSS to create inclusive spaces is a crucial part in making the web a better place, let\u2019s continue moving forward and changing lives.</p>\n\n\n\n<p>Check out another great resource here on CSS-Tricks on <a href=\"https://css-tricks.com/almanac/selectors/f/focus-within/\">using :focus-within</a>.</p>\n",
			"protected": false
		},
		"excerpt": {
			"rendered": "<p>Hey all you wonderful developers out there! In this post, I am going to take you through creating a simple contact form using semantic HTML and an awesome CSS pseudo class known as :focus-within. The :focus-within class allows for great control over focus and letting your user know this is exactly where they are in [&hellip;]</p>\n",
			"protected": false
		},
		"author": 288735,
		"featured_media": 377614,
		"comment_status": "open",
		"ping_status": "closed",
		"sticky": true,
		"template": "",
		"format": "standard",
		"meta": {},
		"categories": [4],
		"tags": [466, 478, 1262, 595, 479, 731],
		"featured_media_src_url": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/03/focus-within-form-accessibility.png?fit=1024%2C512&ssl=1"
	}
]
